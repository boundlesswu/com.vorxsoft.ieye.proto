syntax = "proto3";
import public "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "EventService";

package com.vorxsoft.ieye.proto;
enum VSEventGenus {
    event_genus_null = 0;
    event_genus_monitor = 1;
    event_genus_sio = 2;
    event_genus_ia = 3;
    event_genus_device = 4;
    event_genus_server = 5;
    event_genus_enviroment = 6;
    genus_device_monitor = 7;
    genus_work_monitor = 8;
    genus_manual_record = 9;
}
message getVSEventGenusRequest {
    VSEventGenus type = 1;
}
message getVSEventGenusResponse {
    string name = 1;
}
enum VSEventType {
    event_null = 0;
    event_monitor = 1;
    //移动侦测	event_motion_detect
    event_motion_detect = 101;
    //视频丢失	event_video_lose
    event_video_lose = 102;
    //视频遮挡	event_video_occlusion
    event_video_occlusion = 103;
    //人脸抓拍	event_face_snapshot
    event_face_snapshot = 104;
    //人脸识别	event_face_recognize
    event_face_recognize = 105;
    //进入区域 event_enter_region
    event_enter_region = 106;
    //离开区域 event_leave_region
    event_leave_region = 107;
    //盗移	event_steal_move
    event_steal_move = 108;
    //区域入侵	event_perimeter_alarm
    event_perimeter_alarm = 109;
    //徘徊
    //人员聚集
    //穿越警戒面
    //人员黑名单
    //快速移动
    //拥堵（交通）
    //停车（交通）
    //逆行（交通）
    //行人（交通）
    //抛洒物（交通）
    //烟雾（交通）
    //压线（交通）
    //黑名单数据（交通）
    //超速（交通）
    //慢速（交通）
    //变道（交通）
    //掉头（交通）
    //其它（交通）
    event_sio = 2;
    //开关量报警（通用类型）	event_sio_common
    event_sio_common = 201;
    //烟雾报警	event_smoke
    event_sio_smoke = 202;
    //温度报警	event_temperature
    event_sio_temperature = 203;
    //火灾报警	event_fire
    event_sio_fire = 204;
    //燃气报警	event_gas
    event_sio_gas = 205;
    //红外报警	event_infrared
    event_sio_infrared = 206;
    //震动报警	event_vibration
    event_sio_vibration = 207;
    //漏水报警	event_leakage
    event_sio_leakage = 208;

    event_ia = 3;
    //    停驶	event_ia_traffic_stop
    //行人	event_ia_traffic_human
    //逆行	event_ia_traffic_converse
    //路况	event_ia_traffic_condition
    //非法慢速	event_ia_traffic_lowspeed
    //车流量	event_ia_traffic_flowrate

    //高速车辆停驶
    event_ia_traffic_stop = 301;
    //高速行人
    event_ia_traffic_human = 302;
    //高速车辆逆行
    event_ia_traffic_converse = 303;
    //高速车辆缓行
    event_ia_traffic_lowspeed = 304;
    //高速公路路况
    event_ia_traffic_condition = 305;
    //高速公路车流量
    event_ia_traffic_flowrate = 306;

    event_device = 4;
    //设备离线	event_dev_offline
    event_dev_offline = 401;
    //硬盘满	event_dev_disk_full
    event_dev_disk_full = 402;
    //硬盘错误	event_dev_disk_err
    event_dev_disk_err = 403;
    //升级失败	event_dev_update_fail
    event_dev_update_fail = 404;

    event_server = 5;
    //服务器离线	event_svr_offline
    event_svr_offline = 501;
    //cpu占用率过高	event_svr_cpu
    event_svr_cpu = 502;
    //内存占用率过高	event_svr_ram
    event_svr_ram = 503;
    //硬盘错误	event_svr_disk_err
    event_svr_disk_err = 504;
    //硬盘满	event_svr_disk_full
    event_svr_disk_full = 505;
    //录像错误	event_svr_record_err
    event_svr_record_err = 506;

    event_enviroment = 6;
    //扬尘	event_dust
    event_dust = 601;
    //温度	event_temperature
    event_temperature = 602;
    //温度湿度	event_temperature_humidity
    event_temperature_humidity = 603;
    //气压	event_pressure
    event_pressure = 604;
    //风速	event_windspeed
    event_windspeed = 605;

    device_monitor = 7;
    //塔吊倾角监测器	event_tower_angle_monitor_alarm
    event_tower_angle_monitor_alarm = 701;
    //高支模板变形监测器	hightemplate_deform_alarm
    hightemplate_deform_alarm = 702;

    //业务监测类（预留）		work_monitor
    work_monitor = 8;
    //工作超时	work_overtime_alarm
    work_overtime_alarm = 801;

    //人工录入类（预留）		manual_record
    manual_record = 9;
    //施工	construction_event
    construction_event = 901;
    //拥堵	traffic_jam_event
    traffic_jam_event = 902;
    //塌方	landslide_event
    landslide_event = 903;
}

enum VSGuardPlanType {
    VSGuardPlanTypeNull = 0;
    VSGuardPlanTypePermanent = 1;
    VSGuardPlanTypeTemporary = 2;
}

enum VSEventAlarmLevel {
    AlarmLevelNull = 0;
    AlarmLevelFetal = 1;
    AlarmLevelHigh = 2;
    AlarmLevelMinor = 3;
    AlarmLevelInfo = 4;
}
message VSEventContactsInfo {
    int32 contactId = 1;
    string name = 2;
    string email = 3;
    string phoneNumber = 4;
    string cellPhoneNumber = 5;
}

message VSEventStomInfo {
    int32 stormId = 1;
    VSEventType eventType = 2;
    int32 eventStormInterval = 3;
}

message VSEventGuardPlanInfo {
    int32 guardPlanId = 1;
    string guardPlanName = 2;
    string timeSchedule = 3;
    VSGuardPlanType guardPlayType = 4;
    string startTime = 5;
    string endTime = 6;
}

message VSEventInfo {
    int32 eventId = 1;
    string eventNumber = 2;
    VSEventType eventType = 3;
    string eventName = 4;
    string eventDesc = 5;
    bool eventStatus = 6;
    VSEventAlarmLevel eventAlarmLevel = 7;
    bool eventLinkage = 8;
    int32 autoReleaseInterval = 9;
    int32 guardPlanId = 10;
}

enum VSLinkageType {
    VSLinkageTypeClient = 0;
    VSLinkageTypeWall = 1;
    VSLinkageTypePreset = 2;
    VSLinkageTypeCruise = 3;
    VSLinkageTypeSio = 4;
    VSLinkageTypeRecord = 5;
    VSLinkageTypeSms = 6;
    VSLinkageTypeSnapshot = 7;
    LinkageTypeEmail = 8;
}

message VSEventLinkageInfo {
    int32 linkageId = 1;
    int32 eventId = 2;
    VSLinkageType linkageType = 3;
    repeated string linkageArgs = 4;
}

message VSEventLinkActionRequest {
    VSEventInfo eventinfo = 1;
    VSEventLinkageInfo eventLinkageInfo = 2;
}

message VSEventLinkActionResponse {
    int32 eventId = 1;
    int32 linkageId = 2;
    bool result = 3;
}

message VSEventRequest {
    int32 eventId = 1;
    //VSEventInfo eventInfo=1;
    VSEventType evenType = 2;

    string extraContent = 3;
}
message VSEventResponse {
    int32 eventId = 1;
    bool result = 2;
}

message VSMonitorAlarm {
    VSEventType evenType = 1;
    int32 resourceId = 2;
    google.protobuf.Timestamp happenTime = 3;
    string extraContent = 4;
}
message VSSioAlarm {
    VSEventType evenType = 1;
    int32 resourceId = 2;
    google.protobuf.Timestamp happenTime = 3;
    string extraContent = 4;
}
message VSIaAlarm {
    VSEventType evenType = 1;
    int32 resourceId = 2;
    int32 iaagId = 3;
    int32 iauId = 4;
    google.protobuf.Timestamp happenTime = 5;
    string extraContent = 6;
}
message VSServerAlarm {
    VSEventType evenType = 1;
    int32 machineId = 2;
    google.protobuf.Timestamp happenTime = 3;
    string extraContent = 4;
}
message VSDeviceAlarm {
    VSEventType evenType = 1;
    int32 deviceId = 2;
    google.protobuf.Timestamp happenTime = 3;
    string extraContent = 4;
}
message VSAlarmRequest {
    repeated VSMonitorAlarm monitorAlarm = 1;
    repeated VSSioAlarm sioAlarm = 2;
    repeated VSIaAlarm iaAlarm = 3;
    repeated VSServerAlarm serverAlarm = 4;
    repeated VSDeviceAlarm deviceAlarm = 5;
    int32 serialId = 6;
}

message VSAlarmResponse {
    int32 serialId = 1;
    bool result = 3;
}
//message VSDistributeConfigRequest{
//    VSEventInfo eventinfo=1;
//    VSEventLinkageInfo   eventLinkageInfo=2;
//}
//message VSDistributeConfigResponse{
//    int32 eventId=1;
//    bool result=2;
//}
enum VSConfigType {
    VSConfigTypeEvent = 0;
    VSConfigTypeLinkAge = 1;
    VSConfigTypeOther = 2;
}
message DistributeConfigRequest {
    int32 distributeId = 1;
    VSConfigType configType = 2;
}
message DistributeConfigResponse {
    int32 distributeId = 1;
    bool result = 2;
}

service VSEventService {
    rpc getVSEventGenus (getVSEventGenusRequest) returns (getVSEventGenusResponse);
    rpc SentAlarm (VSAlarmRequest) returns (VSAlarmResponse);
    rpc SentEvent (VSEventRequest) returns (VSEventResponse);
    rpc DistributeConfig (DistributeConfigRequest) returns (DistributeConfigResponse);
    rpc SendEventLinkAction (VSEventLinkActionRequest) returns (VSEventLinkActionResponse);
}
